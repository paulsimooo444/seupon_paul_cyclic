//Cyclic_Code_BFS_in_C++

#include <iostream>
#include <queue>
using namespace std;

int graph[100][100];     // adjacency matrix
int inDegree[100];       // count of incoming edges
int numVertices;         // number of vertices
queue<int> q;           // queue for BFS

// function to count incoming edges for each vertex
void calculateInDegree() {
    // set all in-degrees to 0 first
    for (int i = 0; i < numVertices; i++) {
        inDegree[i] = 0;
    }
    
    // count incoming edges
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            if (graph[i][j] == 1) {  // if there's an edge from i to j
                inDegree[j]++;       // increase in-degree of j
            }
        }
    }
}

// function to detect cycle using BFS (Kahn's algorithm)
bool detectCycle() {
    calculateInDegree();
    
    // clear the queue first
    while (!q.empty()) {
        q.pop();
    }
    
    // add all vertices with in-degree 0 to queue
    for (int i = 0; i < numVertices; i++) {
        if (inDegree[i] == 0) {
            q.push(i);
        }
    }
    
    int processedVertices = 0;  // count how many vertices we process
    
    // process vertices one by one
    while (!q.empty()) {
        int currentVertex = q.front();
        q.pop();
        processedVertices++;  // we processed one more vertex
        
        // look at all neighbors of current vertex
        for (int i = 0; i < numVertices; i++) {
            if (graph[currentVertex][i] == 1) {  // if there's an edge
                inDegree[i]--;                   // reduce in-degree
                if (inDegree[i] == 0) {         // if in-degree becomes 0
                    q.push(i);                   // add to queue
                }
            }
        }
    }
    
    // if we processed all vertices, no cycle
    // if some vertices remain, there's a cycle
    if (processedVertices == numVertices) {
        return false;  // no cycle
    } else {
        return true;   // cycle exists
    }
}

// function to show which vertices are in cycles
void showCycleVertices() {
    cout << "Vertices that are part of cycles: ";
    bool foundAny = false;
    
    for (int i = 0; i < numVertices; i++) {
        if (inDegree[i] > 0) {  // vertices with remaining in-degree are in cycles
            cout << i << " ";
            foundAny = true;
        }
    }
    
    if (!foundAny) {
        cout << "None";
    }
    cout << endl;
}

// function to print adjacency matrix
void printMatrix() {
    cout << "\nAdjacency Matrix:" << endl;
    cout << "  ";
    for (int i = 0; i < numVertices; i++) {
        cout << i << " ";
    }
    cout << endl;
    
    for (int i = 0; i < numVertices; i++) {
        cout << i << " ";
        for (int j = 0; j < numVertices; j++) {
            cout << graph[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

// function to show in-degrees (helpful for understanding)
void showInDegrees() {
    cout << "In-degrees of vertices: ";
    for (int i = 0; i < numVertices; i++) {
        cout << "(" << i << ":" << inDegree[i] << ") ";
    }
    cout << endl;
}

int main() {
    cout << "Cycle Detection using BFS\n" << endl;
    
    // example 1: Simple cycle
    cout << "Example 1: Graph with a Cycle" << endl;
    numVertices = 3;
    
    // initialize matrix to all zeros
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            graph[i][j] = 0;
        }
    }
    
    // create cycle: 0 -> 1 -> 2 -> 0
    graph[0][1] = 1;  // 0 points to 1
    graph[1][2] = 1;  // 1 points to 2
    graph[2][0] = 1;  // 2 points to 0 (makes cycle!)
    
    printMatrix();
    calculateInDegree();
    cout << "Before processing, ";
    showInDegrees();
    
    if (detectCycle()) {
        cout << "Found a cycle!" << endl;
        showCycleVertices();
    } else {
        cout << "No cycle found." << endl;
    }
    
    cout << "\n" << string(50, '-') << endl << endl;
    
    // example 2: No cycle (tree-like)
    cout << "Example 2: Graph without a Cycle" << endl;
    numVertices = 4;
    
    // initialize matrix to all zeros
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            graph[i][j] = 0;
        }
    }
    
    // create tree: 0 -> 1, 0 -> 2, 1 -> 3
    graph[0][1] = 1;  // 0 points to 1
    graph[0][2] = 1;  // 0 points to 2
    graph[1][3] = 1;  // 1 points to 3
    
    printMatrix();
    calculateInDegree();
    cout << "Before processing, ";
    showInDegrees();
    
    if (detectCycle()) {
        cout << "Found a cycle!" << endl;
        showCycleVertices();
    } else {
        cout << "No cycle found." << endl;
    }
    
    cout << "\n" << string(50, '-') << endl << endl;
    
    // example 3: More complex example
    cout << "Example 3: Bigger Graph with Cycles" << endl;
    numVertices = 5;
    
    // initialize matrix to all zeros
    for (int i = 0; i < numVertices; i++) {
        for (int j = 0; j < numVertices; j++) {
            graph[i][j] = 0;
        }
    }
    
    // create complex graph with multiple cycles
    graph[0][1] = 1;  // 0 -> 1
    graph[1][2] = 1;  // 1 -> 2
    graph[2][0] = 1;  // 2 -> 0 (cycle: 0->1->2->0)
    graph[3][4] = 1;  // 3 -> 4
    graph[4][3] = 1;  // 4 -> 3 (cycle: 3->4->3)
    
    printMatrix();
    calculateInDegree();
    cout << "Before processing, ";
    showInDegrees();
    
    if (detectCycle()) {
        cout << "Found cycles!" << endl;
        showCycleVertices();
    } else {
        cout << "No cycle found." << endl;
    }
    
    cout << "\nProgram completed! Bye!" << endl;
    
    return 0;
}
